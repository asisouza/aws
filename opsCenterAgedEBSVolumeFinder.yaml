# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# NOTES
# This CloudFormation template would provision the base infrastructure for the solution
# You don't need to provision any other templates if you're planning to deploy the solution to a single region.

AWSTemplateFormatVersion: "2010-09-09"
Description: 'This template creates the SNS Topic, Lambda function, IAM Role and EventBridge Rule for EBS Unused Volumes mapping'

Parameters:

  S3BucketName: 
    Description: >
      An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
      This is the bucket where you would be storing your LambdaFunction code
    AllowedPattern: '^[a-z0-9_-]{3,63}$'
    ConstraintDescription: 3-63 characters; must contain only lowercase letters or numbers.      
    Type: String
    Default: "s3-cia-my-tf-test-bucket-lambda-001"

  S3BucketKey: 
    Description: The Amazon S3 key of the deployment package.
    Type: String
    Default: "lambdas/opsCenterAgedEBSVolumeFinder.zip"

  LambdaMemory: 
    Description: >
      Amount of memory in MB your Lambda Function can use at runtime. Defaults to 128.
      Memory size ranges from 128 MB to 10,240 MB, in 1-MB increments
    Type: Number
    Default: 256

  SNSTopicName: 
    Description: The name of SNS topic for notifications.
    Type: String
    Default: "sns-ebs-finder-topic01"

  SSMAutomationID: 
    Description: The name of SNS topic for notifications.
    Type: String
    Default: "AWS-CreateSnapshot"

  ScheduleEvent: 
    Description: The schedule for Lambda function trigger.
    Type: String
    Default: "cron(0 23 * * ? *)"
    

Resources:
    SNSTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: !Ref SNSTopicName
            TopicName: !Ref SNSTopicName

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: "ebs-finder-lambda-001"
            Environment: 
                Variables: 
                    BATCH_SIZE: "20"
                    DETAILED_NOTIFICATIONS: "TRUE"
                    IGNORE_WINDOW: "15"
                    SNS_ARN: !Ref SNSTopic
                    SSM_AUTOMATION_ID: !Ref SSMAutomationID
            FunctionName: !Ref EventsRule
            Handler: !Sub "${EventsRule}.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: !Ref S3BucketName
                S3Key: !Ref S3BucketKey
            MemorySize: !Ref LambdaMemory
            Role: !GetAtt IAMRole.Arn
            Runtime: "python3.9"
            Timeout: 180
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ebs-finder-lambda-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy
            Description: "Allows Lambda functions to call AWS services on your behalf."

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "ebs-finder-lambda-policy"
            Path: "/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "cloudtrail:LookupEvents",
                                "cloudtrail:StartLogging",
                                "cloudtrail:GetTrailStatus",
                                "logs:CreateLogGroup",
                                "logs:PutLogEvents",
                                "ssm:CreateOpsItem",
                                "cloudtrail:DescribeTrails",
                                "ec2:DescribeVolumeAttribute",
                                "logs:CreateLogStream",
                                "sns:Publish",
                                "ec2:DescribeVolumeStatus",
                                "cloudtrail:CreateTrail",
                                "ec2:DescribeVolumes"
                            ],
                            "Resource": "*"
                        }
                    ]
                }

    EventsRule:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "opsCenterAgedEBSVolumeFinder"
            Description: "opsCenterAgedEBSVolumeFinder"
            ScheduleExpression: !Ref ScheduleEvent
            State: "ENABLED"
            Targets: 
              - 
                Arn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:opsCenterAgedEBSVolumeFinder"
                Id: "Idd688fad5-c4c5-48b9-8ba3-9f03479ac86d"
            EventBusName: "default"

    PermissionForEventsToInvokeLambda: 
        Type: AWS::Lambda::Permission
        Properties: 
            FunctionName: !Ref "LambdaFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "EventsRule"
                    - "Arn"